{"ast":null,"code":"import axios from \"axios\";\nimport BASE_URL from \"../utils/baseUrl\";\nimport { GET_ERRORS, ORDER_DELIVERED, ORDER_PICKED, DRIVER_ORDERS_LOADING, GET_DRIVER_ORDERS, DRIVER_ORDER_STATUS } from \"./types\";\nimport { notification } from \"antd\";\n\nconst successMessage = successText => {\n  notification[\"success\"]({\n    message: \"Confirmation\",\n    description: successText\n  });\n}; // Pick Order\n\n\nexport const pickOrder = (driId, orderId, orderData) => dispatch => {\n  dispatch(setRestaurantOrderStatus());\n  axios.put(BASE_URL + `/drivers/${driId}/orders/${orderId}/pick`, orderData).then(res => {\n    if (res.status === 200) {\n      dispatch(clearErrors);\n      successMessage(\"Order picked successfully!\");\n      dispatch(getOrders(driId));\n      dispatch({\n        type: ORDER_PICKED\n      });\n    } else {\n      dispatch({\n        type: GET_ERRORS,\n        payload: res.data\n      });\n    }\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Deliver Order\n\nexport const deliverOrder = (driId, orderId, orderData) => dispatch => {\n  dispatch(setRestaurantOrderStatus());\n  axios.put(BASE_URL + `/drivers/${driId}/orders/${orderId}/deliver`, orderData).then(res => {\n    if (res.status === 200) {\n      dispatch(clearErrors);\n      successMessage(\"Order delivered successfully!\");\n      dispatch({\n        type: ORDER_DELIVERED\n      });\n      dispatch(getOrders(driId));\n    } else {\n      dispatch({\n        type: GET_ERRORS,\n        payload: res.data\n      });\n    }\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Get All Orders\n\nexport const getOrders = driId => dispatch => {\n  dispatch(setDriversLoading());\n  axios.get(BASE_URL + `/drivers/${driId}/orders`).then(res => {\n    dispatch({\n      type: GET_DRIVER_ORDERS,\n      payload: res.data\n    });\n  }).catch(() => dispatch({\n    type: GET_DRIVER_ORDERS,\n    payload: null\n  }));\n}; // Clear Errors\n\nexport const clearErrors = () => {\n  return {\n    type: GET_ERRORS,\n    payload: {}\n  };\n}; // Menus Change Loading\n\nexport const setRestaurantOrderStatus = () => {\n  return {\n    type: DRIVER_ORDER_STATUS\n  };\n}; // Orders Loading\n\nexport const setDriversLoading = () => {\n  return {\n    type: DRIVER_ORDERS_LOADING\n  };\n};","map":{"version":3,"sources":["E:/E/MIU/SA/ProjectWS/FinalProject/awesome-delivery/client/src/actions/driverActions.js"],"names":["axios","BASE_URL","GET_ERRORS","ORDER_DELIVERED","ORDER_PICKED","DRIVER_ORDERS_LOADING","GET_DRIVER_ORDERS","DRIVER_ORDER_STATUS","notification","successMessage","successText","message","description","pickOrder","driId","orderId","orderData","dispatch","setRestaurantOrderStatus","put","then","res","status","clearErrors","getOrders","type","payload","data","catch","err","response","deliverOrder","setDriversLoading","get"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport BASE_URL from \"../utils/baseUrl\";\r\nimport {\r\n  GET_ERRORS,\r\n  ORDER_DELIVERED,\r\n  ORDER_PICKED,\r\n  DRIVER_ORDERS_LOADING,\r\n  GET_DRIVER_ORDERS,\r\n  DRIVER_ORDER_STATUS,\r\n} from \"./types\";\r\n\r\nimport { notification } from \"antd\";\r\n\r\nconst successMessage = (successText) => {\r\n  notification[\"success\"]({\r\n    message: \"Confirmation\",\r\n    description: successText,\r\n  });\r\n};\r\n\r\n// Pick Order\r\nexport const pickOrder = (driId, orderId, orderData) => (dispatch) => {\r\n  dispatch(setRestaurantOrderStatus());\r\n  axios\r\n    .put(BASE_URL + `/drivers/${driId}/orders/${orderId}/pick`, orderData)\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        dispatch(clearErrors);\r\n        successMessage(\"Order picked successfully!\");\r\n        dispatch(getOrders(driId));\r\n        dispatch({\r\n          type: ORDER_PICKED,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: GET_ERRORS,\r\n          payload: res.data,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\n// Deliver Order\r\nexport const deliverOrder = (driId, orderId, orderData) => (dispatch) => {\r\n  dispatch(setRestaurantOrderStatus());\r\n  axios\r\n    .put(BASE_URL + `/drivers/${driId}/orders/${orderId}/deliver`, orderData)\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        dispatch(clearErrors);\r\n        successMessage(\"Order delivered successfully!\");\r\n        dispatch({\r\n          type: ORDER_DELIVERED,\r\n        });\r\n        dispatch(getOrders(driId));\r\n      } else {\r\n        dispatch({\r\n          type: GET_ERRORS,\r\n          payload: res.data,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\n// Get All Orders\r\nexport const getOrders = (driId) => (dispatch) => {\r\n  dispatch(setDriversLoading());\r\n  axios\r\n    .get(BASE_URL + `/drivers/${driId}/orders`)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: GET_DRIVER_ORDERS,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch(() =>\r\n      dispatch({\r\n        type: GET_DRIVER_ORDERS,\r\n        payload: null,\r\n      })\r\n    );\r\n};\r\n\r\n// Clear Errors\r\nexport const clearErrors = () => {\r\n  return {\r\n    type: GET_ERRORS,\r\n    payload: {},\r\n  };\r\n};\r\n\r\n// Menus Change Loading\r\nexport const setRestaurantOrderStatus = () => {\r\n  return {\r\n    type: DRIVER_ORDER_STATUS,\r\n  };\r\n};\r\n\r\n// Orders Loading\r\nexport const setDriversLoading = () => {\r\n  return {\r\n    type: DRIVER_ORDERS_LOADING,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}