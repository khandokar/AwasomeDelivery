{"ast":null,"code":"import axios from \"axios\";\nimport BASE_URL from \"../utils/baseUrl\";\nimport { GET_ERRORS, GET_RESTAURANT_MENUS, ADD_RESTAURANT_MENU, UPDATE_RESTAURANT_MENU, DELETE_RESTAURANT_MENU, GET_RESTAURANT_ORDERS, RESTAURANT_ORDER_ACCEPT, RESTAURANT_ORDER_READY, CANCEL_RESTAURANT_ORDER, RESTAURANT_LOADING, RESTAURANT_ORDER_STATUS } from \"./types\";\nimport { notification } from \"antd\";\n\nconst successMessage = successText => {\n  notification[\"success\"]({\n    message: \"Confirmation\",\n    description: successText\n  });\n}; // Create a Menu\n\n\nexport const addMenu = (resId, menuData) => dispatch => {\n  axios.post(BASE_URL + `/restaurants/${resId}/menus`, menuData).then(res => {\n    if (res.status === 200) {\n      dispatch(clearErrors);\n      dispatch({\n        type: ADD_RESTAURANT_MENU\n      });\n      successMessage(\"Menu added successfully!\");\n      dispatch(getMenus(resId));\n    } else {\n      dispatch({\n        type: GET_ERRORS,\n        payload: res.data\n      });\n    }\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Get all menus\n\nexport const getMenus = resId => dispatch => {\n  dispatch(setRestaurantLoading());\n  axios.get(BASE_URL + `/restaurants/${resId}/menus`).then(res => {\n    dispatch({\n      type: GET_RESTAURANT_MENUS,\n      payload: res.data\n    });\n  }).catch(() => dispatch({\n    type: GET_RESTAURANT_MENUS,\n    payload: null\n  }));\n}; // Edit menus\n\nexport const editMenu = (resId, menuId, menu) => dispatch => {\n  dispatch(clearErrors);\n  axios.put(BASE_URL + `/restaurants/${resId}/menus/${menuId}`, menu).then(res => {\n    if (res.status === 200) {\n      dispatch({\n        type: UPDATE_RESTAURANT_MENU,\n        payload: res.data\n      });\n      successMessage(\"Menu updated successfully!\");\n      dispatch(getMenus(resId));\n    } else {\n      dispatch({\n        type: GET_ERRORS,\n        payload: res.data\n      });\n    }\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Delete menu\n\nexport const deleteMenu = (resId, menuId) => dispatch => {\n  axios.delete(`${BASE_URL}/restaurants/${resId}/menus/${menuId}`).then(res => {\n    dispatch(clearErrors);\n\n    if (res.status === 200) {\n      dispatch({\n        type: DELETE_RESTAURANT_MENU,\n        payload: res.data\n      });\n      successMessage(\"Menu deleted Successfully!\");\n    } else {\n      dispatch({\n        type: GET_ERRORS,\n        payload: res.data\n      });\n    }\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Get all orders\n\nexport const getOrders = resId => dispatch => {\n  dispatch(setRestaurantLoading());\n  axios.get(BASE_URL + `/restaurants/${resId}/orders`).then(res => {\n    dispatch({\n      type: GET_RESTAURANT_ORDERS,\n      payload: res.data\n    });\n  }).catch(() => dispatch({\n    type: GET_RESTAURANT_ORDERS,\n    payload: null\n  }));\n}; // Order ready for pickup\n\nexport const acceptOrder = (resId, orderId) => dispatch => {\n  dispatch(setRestaurantOrderStatus());\n  axios.put(`${BASE_URL}/restaurants/${resId}/orders/${orderId}/accept`).then(res => {\n    dispatch(clearErrors);\n\n    if (res.status === 200) {\n      dispatch({\n        type: RESTAURANT_ORDER_ACCEPT,\n        payload: res.data\n      });\n      dispatch(getOrders(resId));\n      successMessage(\"Order accepted successfully!\");\n    } else {\n      dispatch({\n        type: GET_ERRORS,\n        payload: res.data\n      });\n    }\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Reject order\n\nexport const rejectOrder = (resId, orderId) => dispatch => {\n  dispatch(setRestaurantOrderStatus());\n  axios.put(`${BASE_URL}/restaurants/${resId}/orders/${orderId}/reject`).then(res => {\n    dispatch(clearErrors);\n\n    if (res.status === 200) {\n      dispatch({\n        type: CANCEL_RESTAURANT_ORDER,\n        payload: res.data\n      });\n      dispatch(getOrders(resId));\n      successMessage(\"Order rejected successfully!\");\n    } else {\n      dispatch({\n        type: GET_ERRORS,\n        payload: res.data\n      });\n    }\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Order ready for pickup\n\nexport const readyOrder = (resId, orderId) => dispatch => {\n  dispatch(setRestaurantOrderStatus());\n  axios.put(`${BASE_URL}/restaurants/${resId}/orders/${orderId}/ready`).then(res => {\n    dispatch(clearErrors);\n\n    if (res.status === 200) {\n      dispatch({\n        type: RESTAURANT_ORDER_READY,\n        payload: res.data\n      });\n      dispatch(getOrders(resId));\n      successMessage(\"Order ready for pickup!\");\n    } else {\n      dispatch({\n        type: GET_ERRORS,\n        payload: res.data\n      });\n    }\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Clear Errors\n\nexport const clearErrors = () => {\n  return {\n    type: GET_ERRORS,\n    payload: {}\n  };\n}; // Menus Change Loading\n\nexport const setRestaurantOrderStatus = () => {\n  return {\n    type: RESTAURANT_ORDER_STATUS\n  };\n}; // Menus and Orders Loading\n\nexport const setRestaurantLoading = () => {\n  return {\n    type: RESTAURANT_LOADING\n  };\n};","map":{"version":3,"sources":["E:/E/MIU/SA/ProjectWS/FinalProject/awesome-delivery/client/src/actions/restaurantAction.js"],"names":["axios","BASE_URL","GET_ERRORS","GET_RESTAURANT_MENUS","ADD_RESTAURANT_MENU","UPDATE_RESTAURANT_MENU","DELETE_RESTAURANT_MENU","GET_RESTAURANT_ORDERS","RESTAURANT_ORDER_ACCEPT","RESTAURANT_ORDER_READY","CANCEL_RESTAURANT_ORDER","RESTAURANT_LOADING","RESTAURANT_ORDER_STATUS","notification","successMessage","successText","message","description","addMenu","resId","menuData","dispatch","post","then","res","status","clearErrors","type","getMenus","payload","data","catch","err","response","setRestaurantLoading","get","editMenu","menuId","menu","put","deleteMenu","delete","getOrders","acceptOrder","orderId","setRestaurantOrderStatus","rejectOrder","readyOrder"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport BASE_URL from \"../utils/baseUrl\";\r\nimport {\r\n  GET_ERRORS,\r\n  GET_RESTAURANT_MENUS,\r\n  ADD_RESTAURANT_MENU,\r\n  UPDATE_RESTAURANT_MENU,\r\n  DELETE_RESTAURANT_MENU,\r\n  GET_RESTAURANT_ORDERS,\r\n  RESTAURANT_ORDER_ACCEPT,\r\n  RESTAURANT_ORDER_READY,\r\n  CANCEL_RESTAURANT_ORDER,\r\n  RESTAURANT_LOADING,\r\n  RESTAURANT_ORDER_STATUS\r\n} from \"./types\";\r\n\r\nimport { notification } from \"antd\";\r\n\r\nconst successMessage = (successText) => {\r\n  notification[\"success\"]({\r\n    message: \"Confirmation\",\r\n    description: successText,\r\n  });\r\n};\r\n\r\n// Create a Menu\r\nexport const addMenu = (resId, menuData) => (dispatch) => {\r\n  axios\r\n    .post(BASE_URL + `/restaurants/${resId}/menus`, menuData)\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        dispatch(clearErrors);\r\n        dispatch({\r\n          type: ADD_RESTAURANT_MENU,\r\n        });\r\n        successMessage(\"Menu added successfully!\");\r\n        dispatch(getMenus(resId));\r\n      } else {\r\n        dispatch({\r\n          type: GET_ERRORS,\r\n          payload: res.data,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\n// Get all menus\r\nexport const getMenus = (resId) => (dispatch) => {\r\n  dispatch(setRestaurantLoading());\r\n  axios\r\n    .get(BASE_URL + `/restaurants/${resId}/menus`)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: GET_RESTAURANT_MENUS,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch(() =>\r\n      dispatch({\r\n        type: GET_RESTAURANT_MENUS,\r\n        payload: null,\r\n      })\r\n    );\r\n};\r\n\r\n// Edit menus\r\nexport const editMenu = (resId, menuId, menu) => (dispatch) => {\r\n  dispatch(clearErrors);\r\n  axios\r\n    .put(BASE_URL + `/restaurants/${resId}/menus/${menuId}`, menu)\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        dispatch({\r\n          type: UPDATE_RESTAURANT_MENU,\r\n          payload: res.data,\r\n        });\r\n        successMessage(\"Menu updated successfully!\");\r\n        dispatch(getMenus(resId));\r\n      } else {\r\n        dispatch({\r\n          type: GET_ERRORS,\r\n          payload: res.data,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\n// Delete menu\r\nexport const deleteMenu = (resId, menuId) => (dispatch) => {\r\n  axios\r\n    .delete(`${BASE_URL}/restaurants/${resId}/menus/${menuId}`)\r\n    .then((res) => {\r\n      dispatch(clearErrors);\r\n      if (res.status === 200) {\r\n        dispatch({\r\n          type: DELETE_RESTAURANT_MENU,\r\n          payload: res.data,\r\n        });\r\n        successMessage(\"Menu deleted Successfully!\");\r\n      } else {\r\n        dispatch({\r\n          type: GET_ERRORS,\r\n          payload: res.data,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\n// Get all orders\r\nexport const getOrders = (resId) => (dispatch) => {\r\n  dispatch(setRestaurantLoading());\r\n  axios\r\n    .get(BASE_URL + `/restaurants/${resId}/orders`)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: GET_RESTAURANT_ORDERS,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch(() =>\r\n      dispatch({\r\n        type: GET_RESTAURANT_ORDERS,\r\n        payload: null,\r\n      })\r\n    );\r\n};\r\n\r\n// Order ready for pickup\r\nexport const acceptOrder = (resId, orderId) => (dispatch) => {\r\n  dispatch(setRestaurantOrderStatus());\r\n  axios\r\n    .put(`${BASE_URL}/restaurants/${resId}/orders/${orderId}/accept`)\r\n    .then((res) => {\r\n      dispatch(clearErrors);\r\n      if (res.status === 200) {\r\n        dispatch({\r\n          type: RESTAURANT_ORDER_ACCEPT,\r\n          payload: res.data,\r\n        });\r\n        dispatch(getOrders(resId));\r\n        successMessage(\"Order accepted successfully!\");\r\n      } else {\r\n        dispatch({\r\n          type: GET_ERRORS,\r\n          payload: res.data,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\n// Reject order\r\nexport const rejectOrder = (resId, orderId) => (dispatch) => {\r\n  dispatch(setRestaurantOrderStatus());\r\n  axios\r\n    .put(`${BASE_URL}/restaurants/${resId}/orders/${orderId}/reject`)\r\n    .then((res) => {\r\n      dispatch(clearErrors);\r\n      if (res.status === 200) {\r\n        dispatch({\r\n          type: CANCEL_RESTAURANT_ORDER,\r\n          payload: res.data,\r\n        });\r\n        dispatch(getOrders(resId));\r\n        successMessage(\"Order rejected successfully!\");\r\n      } else {\r\n        dispatch({\r\n          type: GET_ERRORS,\r\n          payload: res.data,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\n// Order ready for pickup\r\nexport const readyOrder = (resId, orderId) => (dispatch) => {\r\n  dispatch(setRestaurantOrderStatus());\r\n  axios\r\n    .put(`${BASE_URL}/restaurants/${resId}/orders/${orderId}/ready`)\r\n    .then((res) => {\r\n      dispatch(clearErrors);\r\n      if (res.status === 200) {\r\n        dispatch({\r\n          type: RESTAURANT_ORDER_READY,\r\n          payload: res.data,\r\n        });\r\n        dispatch(getOrders(resId));\r\n        successMessage(\"Order ready for pickup!\");\r\n      } else {\r\n        dispatch({\r\n          type: GET_ERRORS,\r\n          payload: res.data,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\n// Clear Errors\r\nexport const clearErrors = () => {\r\n  return {\r\n    type: GET_ERRORS,\r\n    payload: {},\r\n  };\r\n};\r\n\r\n// Menus Change Loading\r\nexport const setRestaurantOrderStatus = () => {\r\n  return {\r\n    type: RESTAURANT_ORDER_STATUS,\r\n  };\r\n};\r\n\r\n// Menus and Orders Loading\r\nexport const setRestaurantLoading = () => {\r\n  return {\r\n    type: RESTAURANT_LOADING,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}