{"ast":null,"code":"import axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport BASE_URL from \"../utils/baseUrl\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport { CLEAR_CURRENT_USER, CLEAR_CUSTOMER, CLEAR_DRIVER, CLEAR_ERRORS, CLEAR_RESTAURANT, GET_CURRENT_USER, GET_ERRORS, SET_CURRENT_USER } from \"./types\";\nimport { notification } from \"antd\";\n\nconst successMessage = successText => {\n  notification[\"success\"]({\n    message: \"Confirmation\",\n    description: successText\n  });\n};\n\nconst errorMessage = errorText => {\n  notification[\"error\"]({\n    message: 'Failed to login!',\n    description: errorText\n  });\n}; // Register User\n\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(BASE_URL + \"/accounts/register\", userData).then(res => {\n    if (res.status === 200) {\n      successMessage(\"Registered Successfully\");\n      history.push(\"/login\");\n    } else {\n      const e = {\n        registration: \"Unable to register!\"\n      };\n      dispatch({\n        type: GET_ERRORS,\n        payload: e\n      });\n    }\n  }).catch(err => {\n    const e = {\n      registration: \"Unable to register!\"\n    };\n    dispatch({\n      type: GET_ERRORS,\n      payload: e\n    });\n  });\n}; // Login - Get User Token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(BASE_URL + \"/accounts/login\", userData).then(res => {\n    if (res.data.success || res.status === 200) {\n      dispatch(clearErrors()); // Save token to localStorage\n\n      const {\n        tokenValue\n      } = res.data;\n      localStorage.setItem(\"jwtToken\", tokenValue); // Set token to Auth header\n\n      setAuthToken(tokenValue); // Decode token to get user data\n\n      const decoded = jwt_decode(tokenValue); // Set current user\n\n      dispatch(setCurrentUser(decoded));\n      dispatch(getCurrentUser());\n    } else {\n      const e = {\n        credentials: \"Invalid credentials!\"\n      };\n      errorMessage(\"Invalid credentials!\");\n      dispatch({\n        type: GET_ERRORS,\n        payload: e\n      });\n    }\n  }).catch(err => {\n    const e = {\n      credentials: \"Invalid credentials!\"\n    };\n    errorMessage(\"Invalid credentials!\");\n    dispatch({\n      type: GET_ERRORS,\n      payload: e\n    });\n  });\n};\nexport const getCurrentUser = () => dispatch => {\n  axios.get(BASE_URL + \"/accounts/current\").then(res => {\n    dispatch({\n      type: GET_CURRENT_USER,\n      payload: res.data\n    });\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // Set logged in user\n\nexport const clearErrors = () => {\n  return {\n    type: CLEAR_ERRORS\n  };\n}; // Set logged in user\n\nexport const clearCurrentUser = () => {\n  return {\n    type: CLEAR_CURRENT_USER\n  };\n}; // Clear driver\n\nexport const clearDriver = () => {\n  return {\n    type: CLEAR_DRIVER\n  };\n}; // Clear restaurant\n\nexport const clearRestaurant = () => {\n  return {\n    type: CLEAR_RESTAURANT\n  };\n}; // Clear customer\n\nexport const clearCustomer = () => {\n  return {\n    type: CLEAR_CUSTOMER\n  };\n}; // Log user out\n\nexport const logoutUser = history => dispatch => {\n  // Remove token from localstorage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n  dispatch(clearErrors());\n  dispatch(clearCurrentUser());\n  dispatch(clearDriver());\n  dispatch(clearCustomer());\n  dispatch(clearRestaurant());\n  history.push(\"/\");\n};","map":{"version":3,"sources":["E:/E/MIU/SA/ProjectWS/FinalProject/awesome-delivery/client/src/actions/authActions.js"],"names":["axios","jwt_decode","BASE_URL","setAuthToken","CLEAR_CURRENT_USER","CLEAR_CUSTOMER","CLEAR_DRIVER","CLEAR_ERRORS","CLEAR_RESTAURANT","GET_CURRENT_USER","GET_ERRORS","SET_CURRENT_USER","notification","successMessage","successText","message","description","errorMessage","errorText","registerUser","userData","history","dispatch","post","then","res","status","push","e","registration","type","payload","catch","err","loginUser","data","success","clearErrors","tokenValue","localStorage","setItem","decoded","setCurrentUser","getCurrentUser","credentials","get","response","clearCurrentUser","clearDriver","clearRestaurant","clearCustomer","logoutUser","removeItem"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport BASE_URL from \"../utils/baseUrl\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { CLEAR_CURRENT_USER, CLEAR_CUSTOMER, CLEAR_DRIVER, CLEAR_ERRORS, CLEAR_RESTAURANT, GET_CURRENT_USER, GET_ERRORS, SET_CURRENT_USER } from \"./types\";\r\nimport { notification } from \"antd\";\r\n\r\nconst successMessage = (successText) => {\r\n  notification[\"success\"]({\r\n    message: \"Confirmation\",\r\n    description: successText,\r\n  });\r\n};\r\n\r\nconst errorMessage = (errorText) => {\r\n  notification[\"error\"]({\r\n    message: 'Failed to login!',\r\n    description: errorText,\r\n  });\r\n};\r\n// Register User\r\nexport const registerUser = (userData, history) => (dispatch) => {\r\n  axios\r\n    .post(BASE_URL + \"/accounts/register\", userData)\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        successMessage(\"Registered Successfully\");\r\n        history.push(\"/login\");\r\n      } else {\r\n        const e = { registration: \"Unable to register!\" };\r\n        dispatch({\r\n          type: GET_ERRORS,\r\n          payload: e,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      const e = { registration: \"Unable to register!\" };\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: e,\r\n      });\r\n    });\r\n};\r\n\r\n// Login - Get User Token\r\nexport const loginUser = (userData) => (dispatch) => {\r\n  axios\r\n    .post(BASE_URL + \"/accounts/login\", userData)\r\n    .then((res) => {\r\n      if (res.data.success || res.status === 200) {\r\n        dispatch(clearErrors());\r\n        // Save token to localStorage\r\n        const { tokenValue } = res.data;\r\n        localStorage.setItem(\"jwtToken\", tokenValue);\r\n        // Set token to Auth header\r\n        setAuthToken(tokenValue);\r\n        // Decode token to get user data\r\n        const decoded = jwt_decode(tokenValue);\r\n        // Set current user\r\n        dispatch(setCurrentUser(decoded));\r\n        dispatch(getCurrentUser());\r\n        \r\n      } else {\r\n        const e = { credentials:  \"Invalid credentials!\"};\r\n        errorMessage(\"Invalid credentials!\");\r\n        dispatch({\r\n          type: GET_ERRORS,\r\n          payload: e,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      const e = { credentials: \"Invalid credentials!\" };\r\n      errorMessage(\"Invalid credentials!\");\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: e,\r\n      });\r\n    });\r\n};\r\n\r\nexport const getCurrentUser = () => (dispatch) => {\r\n  axios\r\n    .get(BASE_URL + \"/accounts/current\")\r\n    .then((res) => {\r\n      dispatch({\r\n        type: GET_CURRENT_USER,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n// Set logged in user\r\nexport const setCurrentUser = (decoded) => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded,\r\n  };\r\n};\r\n\r\n// Set logged in user\r\nexport const clearErrors= () => {\r\n  return {\r\n    type: CLEAR_ERRORS\r\n  };\r\n};\r\n\r\n// Set logged in user\r\nexport const clearCurrentUser = () => {\r\n  return {\r\n    type: CLEAR_CURRENT_USER\r\n  };\r\n};\r\n\r\n\r\n// Clear driver\r\nexport const clearDriver = () => {\r\n  return {\r\n    type: CLEAR_DRIVER\r\n  };\r\n};\r\n\r\n// Clear restaurant\r\nexport const clearRestaurant = () => {\r\n  return {\r\n    type: CLEAR_RESTAURANT\r\n  };\r\n};\r\n\r\n// Clear customer\r\nexport const clearCustomer = () => {\r\n  return {\r\n    type: CLEAR_CUSTOMER\r\n  };\r\n};\r\n\r\n\r\n// Log user out\r\nexport const logoutUser = (history) => (dispatch) => {\r\n  // Remove token from localstorage\r\n  localStorage.removeItem(\"jwtToken\");\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to {} which will set isAuthenticated to false\r\n  dispatch(setCurrentUser({}));\r\n  dispatch(clearErrors());\r\n  dispatch(clearCurrentUser());\r\n  dispatch(clearDriver());\r\n  dispatch(clearCustomer());\r\n  dispatch(clearRestaurant());\r\n\r\n  history.push(\"/\");\r\n};\r\n"]},"metadata":{},"sourceType":"module"}