{"ast":null,"code":"import axios from \"axios\";\nimport BASE_URL from \"../utils/baseUrl\";\nimport { GET_ERRORS, GET_CUSTOMER_ORDERS, CREATE_ORDER, CUSTOMER_LOADING, GET_CUSTOMER_RESTAURANTS, GET_CUSTOMER_MENUS } from \"./types\";\nimport { notification } from \"antd\";\n\nconst successMessage = successText => {\n  notification[\"success\"]({\n    message: \"Confirmation\",\n    description: successText\n  });\n}; // Create an order\n\n\nexport const createOrder = (cusId, orderData) => dispatch => {\n  axios.post(BASE_URL + `/customers/${cusId}/orders`, orderData).then(res => {\n    if (res.status === 200) {\n      dispatch(clearErrors());\n      dispatch({\n        type: CREATE_ORDER\n      });\n      successMessage(\"Order placed successfully!\");\n    } else {\n      dispatch({\n        type: GET_ERRORS,\n        payload: res.data\n      });\n    }\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Get all restaurants\n\nexport const getRestaurants = () => dispatch => {\n  dispatch(setCustomerLoading());\n  axios.get(BASE_URL + \"/customers/restaurants\").then(res => {\n    dispatch({\n      type: GET_CUSTOMER_RESTAURANTS,\n      payload: res.data\n    });\n  }).catch(() => dispatch({\n    type: GET_CUSTOMER_RESTAURANTS,\n    payload: null\n  }));\n}; // Get all fitered restaurants\n\nexport const getFilteredRestaurants = restaurantName => dispatch => {\n  dispatch(setCustomerLoading());\n  axios.get(BASE_URL + `/customers/restaurants/search?restaurant=${restaurantName}`).then(res => {\n    dispatch({\n      type: GET_CUSTOMER_RESTAURANTS,\n      payload: res.data\n    });\n  }).catch(() => dispatch({\n    type: GET_CUSTOMER_RESTAURANTS,\n    payload: null\n  }));\n}; // Get all fitered menus\n\nexport const getFilteredMenus = (restaurantName, menuName) => dispatch => {\n  dispatch(setCustomerLoading());\n  axios.get(BASE_URL + `/customers/restaurants/search?restaurant=${restaurantName}&menu=${menuName}`).then(res => {\n    dispatch({\n      type: GET_CUSTOMER_MENUS,\n      payload: res.data\n    });\n  }).catch(() => dispatch({\n    type: GET_CUSTOMER_MENUS,\n    payload: null\n  }));\n}; // Get all orders\n\nexport const getOrders = cusId => dispatch => {\n  dispatch(setCustomerLoading());\n  axios.get(BASE_URL + `/customers/${cusId}/orders`).then(res => {\n    dispatch({\n      type: GET_CUSTOMER_ORDERS,\n      payload: res.data\n    });\n  }).catch(() => dispatch({\n    type: GET_CUSTOMER_ORDERS,\n    payload: null\n  }));\n}; // Populate menus from selected restaurant\n\nexport const populateMenusFromRestaurant = data => {\n  return {\n    type: GET_CUSTOMER_MENUS,\n    payload: data\n  };\n}; // Clear Errors\n\nexport const clearErrors = () => {\n  return {\n    type: GET_ERRORS,\n    payload: {}\n  };\n}; // Menus and Order Loading\n\nexport const setCustomerLoading = () => {\n  return {\n    type: CUSTOMER_LOADING\n  };\n};","map":{"version":3,"sources":["E:/E/MIU/SA/ProjectWS/FinalProject/awesome-delivery/client/src/actions/customerActions.js"],"names":["axios","BASE_URL","GET_ERRORS","GET_CUSTOMER_ORDERS","CREATE_ORDER","CUSTOMER_LOADING","GET_CUSTOMER_RESTAURANTS","GET_CUSTOMER_MENUS","notification","successMessage","successText","message","description","createOrder","cusId","orderData","dispatch","post","then","res","status","clearErrors","type","payload","data","catch","err","response","getRestaurants","setCustomerLoading","get","getFilteredRestaurants","restaurantName","getFilteredMenus","menuName","getOrders","populateMenusFromRestaurant"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport BASE_URL from \"../utils/baseUrl\";\r\nimport {\r\n  GET_ERRORS,\r\n  GET_CUSTOMER_ORDERS,\r\n  CREATE_ORDER,\r\n  CUSTOMER_LOADING,\r\n  GET_CUSTOMER_RESTAURANTS,\r\n  GET_CUSTOMER_MENUS\r\n} from \"./types\";\r\n\r\nimport { notification } from \"antd\";\r\n\r\nconst successMessage = (successText) => {\r\n  notification[\"success\"]({\r\n    message: \"Confirmation\",\r\n    description: successText,\r\n  });\r\n};\r\n\r\n// Create an order\r\nexport const createOrder = (cusId,orderData) => (dispatch) => {\r\n  axios\r\n    .post(BASE_URL + `/customers/${cusId}/orders`, orderData)\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        dispatch(clearErrors());\r\n        dispatch({\r\n          type: CREATE_ORDER,\r\n        });\r\n        successMessage(\"Order placed successfully!\");\r\n      } else {\r\n        dispatch({\r\n          type: GET_ERRORS,\r\n          payload: res.data,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\n// Get all restaurants\r\nexport const getRestaurants = () => (dispatch) => {\r\n  dispatch(setCustomerLoading());\r\n  axios\r\n    .get(BASE_URL + \"/customers/restaurants\")\r\n    .then((res) => {\r\n      dispatch({\r\n        type: GET_CUSTOMER_RESTAURANTS,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch(() =>\r\n      dispatch({\r\n        type: GET_CUSTOMER_RESTAURANTS,\r\n        payload: null,\r\n      })\r\n    );\r\n};\r\n\r\n// Get all fitered restaurants\r\nexport const getFilteredRestaurants = (restaurantName) => (dispatch) => {\r\n  dispatch(setCustomerLoading());\r\n  axios\r\n    .get(BASE_URL + `/customers/restaurants/search?restaurant=${restaurantName}`)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: GET_CUSTOMER_RESTAURANTS,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch(() =>\r\n      dispatch({\r\n        type: GET_CUSTOMER_RESTAURANTS,\r\n        payload: null,\r\n      })\r\n    );\r\n};\r\n\r\n// Get all fitered menus\r\nexport const getFilteredMenus = (restaurantName, menuName) => (dispatch) => {\r\n  dispatch(setCustomerLoading());\r\n  axios\r\n    .get(BASE_URL + `/customers/restaurants/search?restaurant=${restaurantName}&menu=${menuName}`)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: GET_CUSTOMER_MENUS,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch(() =>\r\n      dispatch({\r\n        type: GET_CUSTOMER_MENUS,\r\n        payload: null,\r\n      })\r\n    );\r\n};\r\n\r\n// Get all orders\r\nexport const getOrders = (cusId) => (dispatch) => {\r\n  dispatch(setCustomerLoading());\r\n  axios\r\n    .get(BASE_URL + `/customers/${cusId}/orders`)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: GET_CUSTOMER_ORDERS,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch(() =>\r\n      dispatch({\r\n        type: GET_CUSTOMER_ORDERS,\r\n        payload: null,\r\n      })\r\n    );\r\n};\r\n\r\n// Populate menus from selected restaurant\r\nexport const populateMenusFromRestaurant = (data) => {\r\n  return {\r\n    type: GET_CUSTOMER_MENUS,\r\n    payload: data\r\n  }\r\n}\r\n\r\n// Clear Errors\r\nexport const clearErrors = () => {\r\n  return {\r\n    type: GET_ERRORS,\r\n    payload: {},\r\n  };\r\n};\r\n\r\n// Menus and Order Loading\r\nexport const setCustomerLoading = () => {\r\n  return {\r\n    type: CUSTOMER_LOADING,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}